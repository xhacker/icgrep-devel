from subprocess import *
from collections import *
import os.path
import sys
import shutil
import argparse
import json
import re
import time

# run several times and get the average perf data; use perf -r
RUNS = 1

# Used for correctness check, generated by grep.
# Correctness check is necessary, to make sure commands behind the script
# is executed correctly.
ground_truth = {}
ground_truth_file = 'ground_truth.json'


def escape_quotes(e):
    return e.replace("'", "'\\''")


def gen_ground_truth(execution):
    """
    Check if we have ground truth of this execution.
    If not, generate with grep.
    """
    file_des = execution.file.description
    exp_des = execution.expression.description

    if not file_des in ground_truth:
        ground_truth[file_des] = {}
    if not exp_des in ground_truth[file_des]:
        #run grep to get a ground truth
        escaped_e = escape_quotes(execution.expression.expression)
        try:
            res = check_output(["grep", "-c", "-E", escaped_e, execution.file.file])
        except CalledProcessError as e:
            if e.returncode == 1:
                res = "0"
            else:
                print "grep execution error with {0}, {1}".format(file_des, exp_des)

        print "GROUND TRUTH:", file_des, exp_des, res
        ground_truth[file_des][exp_des] = int(res.strip())


def check_count_result(found_string, truth_number):
    #this regex is designed for icgrep, other program may need more regex
    m = re.match(r'Matching Lines:(\d+)', found_string)
    if m:
        if int(m.group(1)) != truth_number:
            print "Expect {0}, but get {1}".format(truth_number, found_string)
            return False
        return True

    #regex for grep
    m = re.match(r'(\d+)', found_string)
    if m:
        if int(m.group(1)) != truth_number:
            print "Expect {0}, but get {1}".format(truth_number, found_string)
            return False
        return True

    print "Warning: '{0}' and '{1}' may not match".format(found_string, truth_number)
    return True


def execute(execution):
    if args.verbose:
        print "Executing: regex {0} on file {1}".format(execution.expression.description,
                                                        execution.file.description)

    gen_ground_truth(execution)

    outputpath = 'output/'+execution.file.description+'/'+execution.expression.description+'/'+execution.program
    if not os.path.exists(outputpath):
        os.makedirs(outputpath)

    one=execute_one(execution, RUNS)
    results_file = open(outputpath+'/'+execution.stat,'w')
    results_file.write(str(one))
    results_file.close()

    return one


def execute_one(execution, count):
    file_des = execution.file.description
    exp_des = execution.expression.description

    outputpath = 'output/'+execution.file.description+'/'+execution.expression.description+'/'+execution.program
    log_file = open('perflog.txt', 'a')
    log_file.write('\nEXECUTION: '+execution.file.description+' '+ execution.expression.description+' '+ execution.program+' '+ execution.stat+'\n')
    log_file.close()
    redirectoutput= ' 2>&1 | tee '+outputpath+'/output.txt >> perflog.txt'
    if execution.program=='grep':
        escaped_e = escape_quotes(execution.expression.expression)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' grep -c -E \'' + escaped_e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='nrgrep112':
        nrgreplocation='nrgrep-1.1.2/nrgrep'
        e = execution.expression.expression
        if nrgrep_override.has_key(e): e = nrgrep_override[e]
        e = escape_quotes(e)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+nrgreplocation+' -c \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='icgrep':
        icgreplocation = '../icgrep-build/icgrep'
        e = escape_quotes(execution.expression.expression)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+ icgreplocation +' -c \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='nrgrep':
        nrgreplocation='nrgrep-1.0/nrgrep'
        e = execution.expression.expression
        if nrgrep_override.has_key(e): e = nrgrep_override[e]
        e = escape_quotes(e)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+nrgreplocation+' -c \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='pcregrep':
        pcregreplocation='pcre-8.12/pcregrep'
        e = escape_quotes(execution.expression.expression)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+pcregreplocation+' -c  \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='gre2p':
        pcregreplocation='gre2p/gre2p'
        e = escape_quotes(execution.expression.expression)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+pcregreplocation+' -c  \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='agrep':
        agreplocation='agrep-3.41/agrep'
        e = execution.expression.expression
        if agrep_override.has_key(e): e = agrep_override[e]
        e = escape_quotes(e)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+agreplocation+' -0 -c \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    if execution.program=='h2cv5':
        h2cv5location='h2cv5'
        e = execution.expression.expression
        e = escape_quotes(e)
        cmd = ['perf stat -x, -o perfoutput -r '+str(count)+' -e '+ execution.stat+ ' '+h2cv5location+' -c \'' + e + '\' '+ execution.file.file + redirectoutput]
        p = Popen(cmd,shell=True)
        p.wait()
    output_file = open('perfoutput', 'r')
    output = output_file.read()
    endpos = output.rfind(execution.stat)-1
    startpos=endpos-1
    while output[startpos-1].isdigit():
        startpos-=1

    #check execution result with ground truth.
    res_file = open(outputpath + '/output.txt')
    found = res_file.read().strip()
    if not check_count_result(found, ground_truth[file_des][exp_des]):
        print "Correctness check error: {0} : {1}".format(file_des, exp_des)

    return int(output[startpos:endpos])


Expression = namedtuple('Expression', ['expression', 'description', 'types'])
expressions = []
File = namedtuple('File',['file','description','types'])
files = []
executions = []
Execution = namedtuple('Execution', ['stat', 'program', 'file', 'expression'])

#http://sljit.sourceforge.net/regex_perf.html
files.append(File('data/mark.txt','mark_twain',('regex_perf',)))
expressions.append(Expression('Twain', 'Twain', ('regex_perf',)))
expressions.append(Expression('^Twain', '^Twain', ('regex_perf',)))
expressions.append(Expression('Twain$', 'Twain$', ('regex_perf',)))
expressions.append(Expression('Huck[a-zA-Z]+|Finn[a-zA-Z]+', 'Huck_or_Finn_', ('regex_perf',)))
expressions.append(Expression('a[^x]{20}b', 'a----b', ('regex_perf',)))
expressions.append(Expression('Tom|Sawyer|Huckleberry|Finn', 'Tom_or_Huck', ('regex_perf',)))
expressions.append(Expression('.{0,3}(Tom|Sawyer|Huckleberry|Finn)', '__Tom_or_Huck', ('regex_perf',)))
expressions.append(Expression('[a-zA-Z]+ing', '___ing', ('regex_perf',)))
expressions.append(Expression('^[a-zA-Z]{0,4}ing[^a-zA-Z]', '....ing_', ('regex_perf',)))
expressions.append(Expression('[a-zA-Z]+ing$', '___ing$', ('regex_perf',)))
expressions.append(Expression('^[a-zA-Z ]{5,}$', 'symline5+$', ('regex_perf',)))
expressions.append(Expression('^.{16,20}$', 'line16-20', ('regex_perf',)))
expressions.append(Expression('([a-f](.[d-m].){0,2}[h-n]){2}', 'af_hnaf_hn', ('regex_perf',)))
expressions.append(Expression('([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]', '_awyer_or_inn', ('regex_perf',)))
expressions.append(Expression('"[^"]{0,30}[?!.]"', 'quoted_sentence0-30', ('regex_perf',)))
expressions.append(Expression('Tom.{10,25}river|river.{10,25}Tom', 'Tom_near_river', ('regex_perf',)))


expressions.append(Expression('a[^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x]b', 'a----b', ('regex_perf2',)))
expressions.append(Expression('.?.?.?(Tom|Sawyer|Huckleberry|Finn)', '__Tom_or_Huck', ('regex_perf2',)))
expressions.append(Expression('^[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?ing[^a-zA-Z]', '....ing_', ('regex_perf2',)))
expressions.append(Expression('^[a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ]*$', 'symline5+$', ('regex_perf2',)))
expressions.append(Expression('^.................?.?.?.?$', 'line16-20', ('regex_perf2',)))
expressions.append(Expression('([a-f](.[d-m].)?(.[d-m].)?[h-n])([a-f](.[d-m].)?(.[d-m].)?[h-n])', 'af_hnaf_hn', ('regex_perf2',)))
expressions.append(Expression('"[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[?!.]"', 'quoted_sentence0-30', ('regex_perf2',)))
expressions.append(Expression('Tom...........?.?.?.?.?.?.?.?.?.?.?.?.?.?.?river|river...........?.?.?.?.?.?.?.?.?.?.?.?.?.?.?Tom', 'Tom_near_river', ('regex_perf2',)))

nrgrep_override = {}
nrgrep_override['a[^x]{20}b'] = 'a[^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x][^x]b'
nrgrep_override['.{0,3}(Tom|Sawyer|Huckleberry|Finn)'] = '.?.?.?(Tom|Sawyer|Huckleberry|Finn)'
nrgrep_override['^[a-zA-Z]{0,4}ing[^a-zA-Z]'] = '^[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?ing[^a-zA-Z]'
nrgrep_override['^[a-zA-Z ]{5,}$'] = '^[a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ][a-zA-Z ]*[\x0d]$'
nrgrep_override['^.{16,20}$'] = '^................?.?.?.?[\x0d]$'
nrgrep_override['([a-f](.[d-m].){0,2}[h-n]){2}'] = '[a-f](.[d-m].)?(.[d-m].)?[h-n][a-f](.[d-m].)?(.[d-m].)?[h-n]'
nrgrep_override['"[^"]{0,30}[?!.]"'] = '"[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[^"]?[?!.]"'
nrgrep_override['Tom.{10,25}river|river.{10,25}Tom'] = 'Tom...........?.?.?.?.?.?.?.?.?.?.?.?.?.?.?river|river...........?.?.?.?.?.?.?.?.?.?.?.?.?.?.?Tom'

agrep_override = nrgrep_override
agrep_override['Huck[a-zA-Z]+|Finn[a-zA-Z]+'] = 'Huck[a-zA-Z][a-zA-Z]*|Finn[a-zA-Z][a-zA-Z]*'
agrep_override['[a-zA-Z]+ing'] = '[a-zA-Z][a-zA-Z]*ing'
agrep_override['[a-zA-Z]+ing$'] = '[a-zA-Z][a-zA-Z]*ing$'
agrep_override['([a-zA-Z][a-zA-Z0-9]*)://([^ /]+)(/[^ ]*)?'] = '([a-zA-Z][a-zA-Z0-9]*)://([^ /][^ /]*)(/[^ ]*)?'
agrep_override['([^ @]+)@([^ @]+)'] = '([^ @][^ @]*)@([^ @][^ @]*)'
agrep_override['([a-zA-Z][a-zA-Z0-9]*)://([^ /]+)(/[^ ]*)?|([^ @]+)@([^ @]+)'] = '([a-zA-Z][a-zA-Z0-9]*)://([^ /][^ /]*)(/[^ ]*)?|([^ @][^ @]*)@([^ @][^ @]*)'
agrep_override['[0-9]+[.][0-9]+, *[0-9]+[.][0-9]+'] = '[0-9][0-9]*[.][0-9][0-9]*\, *[0-9][0-9]*[.][0-9][0-9]*'


#http://lh3lh3.users.sourceforge.net/reb.shtml
files.append(File('data/howto','howto',('reb',)))
expressions.append(Expression('@', 'at', ('reb',)))
#expressions.append(Expression('([a-zA-Z][a-zA-Z0-9]*)://([^ /]+)(/[^ ]*)?', 'URI', ('reb',)))
expressions.append(Expression('([^ @]+)@([^ @]+)', 'Email', ('reb',)))
expressions.append(Expression('([0-9][0-9]?)/([0-9][0-9]?)/([0-9][0-9]([0-9][0-9])?)', 'Date', ('reb',)))
expressions.append(Expression('(([a-zA-Z][a-zA-Z0-9]*)://|mailto:)([^ /]+)(/[^ ]*)?|([^ @]+)@([^ @]+)', 'URIorEmail', ('reb',)))
expressions.append(Expression('[ ](0x)?([a-fA-F0-9][a-fA-F0-9])+[.:,?! ]', 'xHexBytes', ('reb',)))
expressions.append(Expression('[A-Z]((([a-zA-Z]*a[a-zA-Z]*[ ])*[a-zA-Z]*e[a-zA-Z]*[ ])*[a-zA-Z]*s[a-zA-Z]*[ ])*[.?!]', 'zStarHeight', ('reb',)))
#expressions.append(Expression('0x([a-fA-F0-9][a-fA-F0-9])+', 'HexBytes', ('reb',)))


files.append(File('data/roads-2.gml', 'roads', ('gml',)))
expressions.append(Expression('<!--([^-]|-[^-])*-->', 'comment', ('gml',)))
expressions.append(Expression('<[^!?][^>]*>', 'tag', ('gml',)))
expressions.append(Expression('<gml:[^>]* xmlns:gml="[^"]*"[^>]*>', 'xmlns:gml', ('gml',)))
expressions.append(Expression('[0-9]+[.][0-9]+, *[0-9]+[.][0-9]+', 'coord', ('gml',)))
expressions.append(Expression(r"""["']|&quot;|&apos;|&#0*3[49];|&#x0*2[27];""", 'xquote', ('gml',)))

#expressions.append(Expression('(^|[^A-Z0-9:])([A-F0-9]{1,4}:){7}[A-F0-9]{1,4}($|[^A-Z0-9:])', 'IPv6', ('reb',)))

#stats = ['cycles:u', 'instructions:u', 'cache-misses:u', 'L1-dcache-load-misses:u', 'L1-dcache-store-misses:u', 'L1-dcache-prefetch-misses:u', 'L1-icache-load-misses:u']
stats = ['cycles:u','instructions:u']

#init perf result, which is a dict,
#perf[program][file][expression][stat] = cycles/instructions etc.
perf = {}

log_file = open('perflog.txt', 'w')
log_file.close()

def init_executions():
    for file in files:
        for expression in expressions:
            match = False
            for type1 in file.types:
                for type2 in expression.types:
                    if type1 == type2:
                        match = True
            if match:
                for stat in stats:
                    executions.append(Execution(stat, args.program,
                                                file, expression))

if __name__ == "__main__":
    # Parse args
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--reground", help="regenerate groundtruth (grep) results", action="store_true")
    parser.add_argument("-v", "--verbose", help="more output", action="store_true")
    parser.add_argument("program", help="program to test performance", choices=["icgrep", "grep", "etc."])
    args = parser.parse_args()

    if not os.path.isfile(ground_truth_file) or args.reground:
        f = open(ground_truth_file,'w')
        f.close()
    else:
        try:
            ground_truth = json.load(fp = open(ground_truth_file, 'r'))
        except:
            ground_truth = {}

    init_executions()

    for execution in executions:
        calc = execute(execution)

        file_des = execution.file.description
        exp_des = execution.expression.description
        program_des = execution.program
        stat = execution.stat

        if program_des not in perf:
            perf[program_des] = {}
        if file_des not in perf[program_des]:
            perf[program_des][file_des] = {}
        if exp_des not in perf[program_des][file_des]:
            perf[program_des][file_des][exp_des] = {}

        perf[program_des][file_des][exp_des][stat] = calc

    #dump ground truth
    json.dump(obj=ground_truth, fp=open(ground_truth_file, 'w'), indent=4, separators=(',', ': '))

    #dump perf result
    print "Please input a name for perf data (press Enter to use default={0}): ".format(args.program)
    name = raw_input()
    if name.strip() == '':
        name = args.program

    perf_file = name + time.strftime("-%Y%m%d-%H%M%S") + "-perf.json"
    json.dump(obj=perf, fp=open(perf_file, 'w'), indent =4, separators=(',', ': '))
    print "Perf result dumped to {0}.".format(perf_file)
