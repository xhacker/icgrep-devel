#ifndef PROPERTYVALUEALIASES_H
#define PROPERTYVALUEALIASES_H
/*
 *  Copyright (c) 2015 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include "PropertyAliases.h"
#include <string>
#include <unordered_map>
#include <vector>
namespace UCD {

    namespace Binary_ns {
        enum value_t {
            N, Y};
        const static std::vector<std::string> enum_names = {
            "N", "Y"};
        const static std::vector<std::string> value_names = {
            "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"n", N}, {"y", Y}, {"no", N}, {"yes", Y}, {"f", N}, {"t", Y},
            {"false", N}, {"true", Y}}};
    }

    namespace JSN_ns {
        enum value_t {
            A, AE, B, BB, BS, C, D, DD, E, EO, EU, G, GG, GS, H, I, J, JJ,
            K, L, LB, LG, LH, LM, LP, LS, LT, M, N, NG, NH, NJ, O, OE, P, R,
            S, SS, T, U, WA, WAE, WE, WEO, WI, YA, YAE, YE, YEO, YI, YO, YU};
        const static std::vector<std::string> enum_names = {
            "A", "AE", "B", "BB", "BS", "C", "D", "DD", "E", "EO", "EU",
            "G", "GG", "GS", "H", "I", "J", "JJ", "K", "L", "LB", "LG",
            "LH", "LM", "LP", "LS", "LT", "M", "N", "NG", "NH", "NJ", "O",
            "OE", "P", "R", "S", "SS", "T", "U", "WA", "WAE", "WE", "WEO",
            "WI", "YA", "YAE", "YE", "YEO", "YI", "YO", "YU"};
        const static std::vector<std::string> value_names = {
            "A", "AE", "B", "BB", "BS", "C", "D", "DD", "E", "EO", "EU",
            "G", "GG", "GS", "H", "I", "J", "JJ", "K", "L", "LB", "LG",
            "LH", "LM", "LP", "LS", "LT", "M", "N", "NG", "NH", "NJ", "O",
            "OE", "P", "R", "S", "SS", "T", "U", "WA", "WAE", "WE", "WEO",
            "WI", "YA", "YAE", "YE", "YEO", "YI", "YO", "YU"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace SCX_ns {
        enum value_t {
            Aghb, Ahom, Arab, Armi, Armn, Avst, Bali, Bamu, Bass, Batk,
            Beng, Bopo, Brah, Brai, Bugi, Buhd, Cakm, Cans, Cari, Cham,
            Cher, Copt, Cprt, Cyrl, Deva, Dsrt, Dupl, Egyp, Elba, Ethi,
            Geor, Glag, Goth, Gran, Grek, Gujr, Guru, Hang, Hani, Hano,
            Hatr, Hebr, Hira, Hluw, Hmng, Hrkt, Hung, Ital, Java, Kali,
            Kana, Khar, Khmr, Khoj, Knda, Kthi, Lana, Laoo, Latn, Lepc,
            Limb, Lina, Linb, Lisu, Lyci, Lydi, Mahj, Mand, Mani, Mend,
            Merc, Mero, Mlym, Modi, Mong, Mroo, Mtei, Mult, Mymr, Narb,
            Nbat, Nkoo, Ogam, Olck, Orkh, Orya, Osma, Palm, Pauc, Perm,
            Phag, Phli, Phlp, Phnx, Plrd, Prti, Rjng, Runr, Samr, Sarb,
            Saur, Sgnw, Shaw, Shrd, Sidd, Sind, Sinh, Sora, Sund, Sylo,
            Syrc, Tagb, Takr, Tale, Talu, Taml, Tavt, Telu, Tfng, Tglg,
            Thaa, Thai, Tibt, Tirh, Ugar, Vaii, Wara, Xpeo, Xsux, Yiii,
            Zinh, Zyyy, Zzzz};
        const static std::vector<std::string> enum_names = {
            "Aghb", "Ahom", "Arab", "Armi", "Armn", "Avst", "Bali", "Bamu",
            "Bass", "Batk", "Beng", "Bopo", "Brah", "Brai", "Bugi", "Buhd",
            "Cakm", "Cans", "Cari", "Cham", "Cher", "Copt", "Cprt", "Cyrl",
            "Deva", "Dsrt", "Dupl", "Egyp", "Elba", "Ethi", "Geor", "Glag",
            "Goth", "Gran", "Grek", "Gujr", "Guru", "Hang", "Hani", "Hano",
            "Hatr", "Hebr", "Hira", "Hluw", "Hmng", "Hrkt", "Hung", "Ital",
            "Java", "Kali", "Kana", "Khar", "Khmr", "Khoj", "Knda", "Kthi",
            "Lana", "Laoo", "Latn", "Lepc", "Limb", "Lina", "Linb", "Lisu",
            "Lyci", "Lydi", "Mahj", "Mand", "Mani", "Mend", "Merc", "Mero",
            "Mlym", "Modi", "Mong", "Mroo", "Mtei", "Mult", "Mymr", "Narb",
            "Nbat", "Nkoo", "Ogam", "Olck", "Orkh", "Orya", "Osma", "Palm",
            "Pauc", "Perm", "Phag", "Phli", "Phlp", "Phnx", "Plrd", "Prti",
            "Rjng", "Runr", "Samr", "Sarb", "Saur", "Sgnw", "Shaw", "Shrd",
            "Sidd", "Sind", "Sinh", "Sora", "Sund", "Sylo", "Syrc", "Tagb",
            "Takr", "Tale", "Talu", "Taml", "Tavt", "Telu", "Tfng", "Tglg",
            "Thaa", "Thai", "Tibt", "Tirh", "Ugar", "Vaii", "Wara", "Xpeo",
            "Xsux", "Yiii", "Zinh", "Zyyy", "Zzzz"};
        const static std::vector<std::string> value_names = {
            "Caucasian_Albanian", "Ahom", "Arabic", "Imperial_Aramaic",
            "Armenian", "Avestan", "Balinese", "Bamum", "Bassa_Vah",
            "Batak", "Bengali", "Bopomofo", "Brahmi", "Braille", "Buginese",
            "Buhid", "Chakma", "Canadian_Aboriginal", "Carian", "Cham",
            "Cherokee", "Coptic", "Cypriot", "Cyrillic", "Devanagari",
            "Deseret", "Duployan", "Egyptian_Hieroglyphs", "Elbasan",
            "Ethiopic", "Georgian", "Glagolitic", "Gothic", "Grantha",
            "Greek", "Gujarati", "Gurmukhi", "Hangul", "Han", "Hanunoo",
            "Hatran", "Hebrew", "Hiragana", "Anatolian_Hieroglyphs",
            "Pahawh_Hmong", "Katakana_Or_Hiragana", "Old_Hungarian",
            "Old_Italic", "Javanese", "Kayah_Li", "Katakana", "Kharoshthi",
            "Khmer", "Khojki", "Kannada", "Kaithi", "Tai_Tham", "Lao",
            "Latin", "Lepcha", "Limbu", "Linear_A", "Linear_B", "Lisu",
            "Lycian", "Lydian", "Mahajani", "Mandaic", "Manichaean",
            "Mende_Kikakui", "Meroitic_Cursive", "Meroitic_Hieroglyphs",
            "Malayalam", "Modi", "Mongolian", "Mro", "Meetei_Mayek",
            "Multani", "Myanmar", "Old_North_Arabian", "Nabataean", "Nko",
            "Ogham", "Ol_Chiki", "Old_Turkic", "Oriya", "Osmanya",
            "Palmyrene", "Pau_Cin_Hau", "Old_Permic", "Phags_Pa",
            "Inscriptional_Pahlavi", "Psalter_Pahlavi", "Phoenician",
            "Miao", "Inscriptional_Parthian", "Rejang", "Runic",
            "Samaritan", "Old_South_Arabian", "Saurashtra", "SignWriting",
            "Shavian", "Sharada", "Siddham", "Khudawadi", "Sinhala",
            "Sora_Sompeng", "Sundanese", "Syloti_Nagri", "Syriac",
            "Tagbanwa", "Takri", "Tai_Le", "New_Tai_Lue", "Tamil",
            "Tai_Viet", "Telugu", "Tifinagh", "Tagalog", "Thaana", "Thai",
            "Tibetan", "Tirhuta", "Ugaritic", "Vai", "Warang_Citi",
            "Old_Persian", "Cuneiform", "Yi", "Inherited", "Common",
            "Unknown"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"qaac", SCX_ns::Copt}, {"qaai", SCX_ns::Zinh}}};
    }

    namespace AGE_ns {
        enum value_t {
            V1_1, V2_0, V2_1, V3_0, V3_1, V3_2, V4_0, V4_1, V5_0, V5_1,
            V5_2, V6_0, V6_1, V6_2, V6_3, V7_0, V8_0, Unassigned};
        const static std::vector<std::string> enum_names = {
            "V1_1", "V2_0", "V2_1", "V3_0", "V3_1", "V3_2", "V4_0", "V4_1",
            "V5_0", "V5_1", "V5_2", "V6_0", "V6_1", "V6_2", "V6_3", "V7_0",
            "V8_0", "Unassigned"};
        const static std::vector<std::string> value_names = {
            "V1_1", "V2_0", "V2_1", "V3_0", "V3_1", "V3_2", "V4_0", "V4_1",
            "V5_0", "V5_1", "V5_2", "V6_0", "V6_1", "V6_2", "V6_3", "V7_0",
            "V8_0", "Unassigned"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"1.1", AGE_ns::V1_1}, {"2.0", AGE_ns::V2_0},
            {"2.1", AGE_ns::V2_1}, {"3.0", AGE_ns::V3_0},
            {"3.1", AGE_ns::V3_1}, {"3.2", AGE_ns::V3_2},
            {"4.0", AGE_ns::V4_0}, {"4.1", AGE_ns::V4_1},
            {"5.0", AGE_ns::V5_0}, {"5.1", AGE_ns::V5_1},
            {"5.2", AGE_ns::V5_2}, {"6.0", AGE_ns::V6_0},
            {"6.1", AGE_ns::V6_1}, {"6.2", AGE_ns::V6_2},
            {"6.3", AGE_ns::V6_3}, {"7.0", AGE_ns::V7_0},
            {"8.0", AGE_ns::V8_0}, {"na", AGE_ns::Unassigned}}};
    }

    namespace BLK_ns {
        enum value_t {
            Aegean_Numbers, Ahom, Alchemical, Alphabetic_PF,
            Anatolian_Hieroglyphs, Ancient_Greek_Music,
            Ancient_Greek_Numbers, Ancient_Symbols, Arabic, Arabic_Ext_A,
            Arabic_Math, Arabic_PF_A, Arabic_PF_B, Arabic_Sup, Armenian,
            Arrows, ASCII, Avestan, Balinese, Bamum, Bamum_Sup, Bassa_Vah,
            Batak, Bengali, Block_Elements, Bopomofo, Bopomofo_Ext,
            Box_Drawing, Brahmi, Braille, Buginese, Buhid, Byzantine_Music,
            Carian, Caucasian_Albanian, Chakma, Cham, Cherokee,
            Cherokee_Sup, CJK, CJK_Compat, CJK_Compat_Forms,
            CJK_Compat_Ideographs, CJK_Compat_Ideographs_Sup, CJK_Ext_A,
            CJK_Ext_B, CJK_Ext_C, CJK_Ext_D, CJK_Ext_E, CJK_Radicals_Sup,
            CJK_Strokes, CJK_Symbols, Compat_Jamo, Control_Pictures, Coptic,
            Coptic_Epact_Numbers, Counting_Rod, Cuneiform,
            Cuneiform_Numbers, Currency_Symbols, Cypriot_Syllabary,
            Cyrillic, Cyrillic_Ext_A, Cyrillic_Ext_B, Cyrillic_Sup, Deseret,
            Devanagari, Devanagari_Ext, Diacriticals, Diacriticals_Ext,
            Diacriticals_For_Symbols, Diacriticals_Sup, Dingbats, Domino,
            Duployan, Early_Dynastic_Cuneiform, Egyptian_Hieroglyphs,
            Elbasan, Emoticons, Enclosed_Alphanum, Enclosed_Alphanum_Sup,
            Enclosed_CJK, Enclosed_Ideographic_Sup, Ethiopic, Ethiopic_Ext,
            Ethiopic_Ext_A, Ethiopic_Sup, Geometric_Shapes,
            Geometric_Shapes_Ext, Georgian, Georgian_Sup, Glagolitic,
            Gothic, Grantha, Greek, Greek_Ext, Gujarati, Gurmukhi,
            Half_And_Full_Forms, Half_Marks, Hangul, Hanunoo, Hatran,
            Hebrew, High_PU_Surrogates, High_Surrogates, Hiragana, IDC,
            Imperial_Aramaic, Indic_Number_Forms, Inscriptional_Pahlavi,
            Inscriptional_Parthian, IPA_Ext, Jamo, Jamo_Ext_A, Jamo_Ext_B,
            Javanese, Kaithi, Kana_Sup, Kanbun, Kangxi, Kannada, Katakana,
            Katakana_Ext, Kayah_Li, Kharoshthi, Khmer, Khmer_Symbols,
            Khojki, Khudawadi, Lao, Latin_1_Sup, Latin_Ext_A,
            Latin_Ext_Additional, Latin_Ext_B, Latin_Ext_C, Latin_Ext_D,
            Latin_Ext_E, Lepcha, Letterlike_Symbols, Limbu, Linear_A,
            Linear_B_Ideograms, Linear_B_Syllabary, Lisu, Low_Surrogates,
            Lycian, Lydian, Mahajani, Mahjong, Malayalam, Mandaic,
            Manichaean, Math_Alphanum, Math_Operators, Meetei_Mayek,
            Meetei_Mayek_Ext, Mende_Kikakui, Meroitic_Cursive,
            Meroitic_Hieroglyphs, Miao, Misc_Arrows, Misc_Math_Symbols_A,
            Misc_Math_Symbols_B, Misc_Pictographs, Misc_Symbols,
            Misc_Technical, Modi, Modifier_Letters, Modifier_Tone_Letters,
            Mongolian, Mro, Multani, Music, Myanmar, Myanmar_Ext_A,
            Myanmar_Ext_B, Nabataean, NB, New_Tai_Lue, NKo, Number_Forms,
            OCR, Ogham, Ol_Chiki, Old_Hungarian, Old_Italic,
            Old_North_Arabian, Old_Permic, Old_Persian, Old_South_Arabian,
            Old_Turkic, Oriya, Ornamental_Dingbats, Osmanya, Pahawh_Hmong,
            Palmyrene, Pau_Cin_Hau, Phags_Pa, Phaistos, Phoenician,
            Phonetic_Ext, Phonetic_Ext_Sup, Playing_Cards, Psalter_Pahlavi,
            PUA, Punctuation, Rejang, Rumi, Runic, Samaritan, Saurashtra,
            Sharada, Shavian, Shorthand_Format_Controls, Siddham, Sinhala,
            Sinhala_Archaic_Numbers, Small_Forms, Sora_Sompeng, Specials,
            Sundanese, Sundanese_Sup, Sup_Arrows_A, Sup_Arrows_B,
            Sup_Arrows_C, Sup_Math_Operators, Sup_PUA_A, Sup_PUA_B,
            Sup_Punctuation, Sup_Symbols_And_Pictographs, Super_And_Sub,
            Sutton_SignWriting, Syloti_Nagri, Syriac, Tagalog, Tagbanwa,
            Tags, Tai_Le, Tai_Tham, Tai_Viet, Tai_Xuan_Jing, Takri, Tamil,
            Telugu, Thaana, Thai, Tibetan, Tifinagh, Tirhuta,
            Transport_And_Map, UCAS, UCAS_Ext, Ugaritic, Vai, Vedic_Ext,
            Vertical_Forms, VS, VS_Sup, Warang_Citi, Yi_Radicals,
            Yi_Syllables, Yijing};
        const static std::vector<std::string> enum_names = {
            "Aegean_Numbers", "Ahom", "Alchemical", "Alphabetic_PF",
            "Anatolian_Hieroglyphs", "Ancient_Greek_Music",
            "Ancient_Greek_Numbers", "Ancient_Symbols", "Arabic",
            "Arabic_Ext_A", "Arabic_Math", "Arabic_PF_A", "Arabic_PF_B",
            "Arabic_Sup", "Armenian", "Arrows", "ASCII", "Avestan",
            "Balinese", "Bamum", "Bamum_Sup", "Bassa_Vah", "Batak",
            "Bengali", "Block_Elements", "Bopomofo", "Bopomofo_Ext",
            "Box_Drawing", "Brahmi", "Braille", "Buginese", "Buhid",
            "Byzantine_Music", "Carian", "Caucasian_Albanian", "Chakma",
            "Cham", "Cherokee", "Cherokee_Sup", "CJK", "CJK_Compat",
            "CJK_Compat_Forms", "CJK_Compat_Ideographs",
            "CJK_Compat_Ideographs_Sup", "CJK_Ext_A", "CJK_Ext_B",
            "CJK_Ext_C", "CJK_Ext_D", "CJK_Ext_E", "CJK_Radicals_Sup",
            "CJK_Strokes", "CJK_Symbols", "Compat_Jamo", "Control_Pictures",
            "Coptic", "Coptic_Epact_Numbers", "Counting_Rod", "Cuneiform",
            "Cuneiform_Numbers", "Currency_Symbols", "Cypriot_Syllabary",
            "Cyrillic", "Cyrillic_Ext_A", "Cyrillic_Ext_B", "Cyrillic_Sup",
            "Deseret", "Devanagari", "Devanagari_Ext", "Diacriticals",
            "Diacriticals_Ext", "Diacriticals_For_Symbols",
            "Diacriticals_Sup", "Dingbats", "Domino", "Duployan",
            "Early_Dynastic_Cuneiform", "Egyptian_Hieroglyphs", "Elbasan",
            "Emoticons", "Enclosed_Alphanum", "Enclosed_Alphanum_Sup",
            "Enclosed_CJK", "Enclosed_Ideographic_Sup", "Ethiopic",
            "Ethiopic_Ext", "Ethiopic_Ext_A", "Ethiopic_Sup",
            "Geometric_Shapes", "Geometric_Shapes_Ext", "Georgian",
            "Georgian_Sup", "Glagolitic", "Gothic", "Grantha", "Greek",
            "Greek_Ext", "Gujarati", "Gurmukhi", "Half_And_Full_Forms",
            "Half_Marks", "Hangul", "Hanunoo", "Hatran", "Hebrew",
            "High_PU_Surrogates", "High_Surrogates", "Hiragana", "IDC",
            "Imperial_Aramaic", "Indic_Number_Forms",
            "Inscriptional_Pahlavi", "Inscriptional_Parthian", "IPA_Ext",
            "Jamo", "Jamo_Ext_A", "Jamo_Ext_B", "Javanese", "Kaithi",
            "Kana_Sup", "Kanbun", "Kangxi", "Kannada", "Katakana",
            "Katakana_Ext", "Kayah_Li", "Kharoshthi", "Khmer",
            "Khmer_Symbols", "Khojki", "Khudawadi", "Lao", "Latin_1_Sup",
            "Latin_Ext_A", "Latin_Ext_Additional", "Latin_Ext_B",
            "Latin_Ext_C", "Latin_Ext_D", "Latin_Ext_E", "Lepcha",
            "Letterlike_Symbols", "Limbu", "Linear_A", "Linear_B_Ideograms",
            "Linear_B_Syllabary", "Lisu", "Low_Surrogates", "Lycian",
            "Lydian", "Mahajani", "Mahjong", "Malayalam", "Mandaic",
            "Manichaean", "Math_Alphanum", "Math_Operators", "Meetei_Mayek",
            "Meetei_Mayek_Ext", "Mende_Kikakui", "Meroitic_Cursive",
            "Meroitic_Hieroglyphs", "Miao", "Misc_Arrows",
            "Misc_Math_Symbols_A", "Misc_Math_Symbols_B",
            "Misc_Pictographs", "Misc_Symbols", "Misc_Technical", "Modi",
            "Modifier_Letters", "Modifier_Tone_Letters", "Mongolian", "Mro",
            "Multani", "Music", "Myanmar", "Myanmar_Ext_A", "Myanmar_Ext_B",
            "Nabataean", "NB", "New_Tai_Lue", "NKo", "Number_Forms", "OCR",
            "Ogham", "Ol_Chiki", "Old_Hungarian", "Old_Italic",
            "Old_North_Arabian", "Old_Permic", "Old_Persian",
            "Old_South_Arabian", "Old_Turkic", "Oriya",
            "Ornamental_Dingbats", "Osmanya", "Pahawh_Hmong", "Palmyrene",
            "Pau_Cin_Hau", "Phags_Pa", "Phaistos", "Phoenician",
            "Phonetic_Ext", "Phonetic_Ext_Sup", "Playing_Cards",
            "Psalter_Pahlavi", "PUA", "Punctuation", "Rejang", "Rumi",
            "Runic", "Samaritan", "Saurashtra", "Sharada", "Shavian",
            "Shorthand_Format_Controls", "Siddham", "Sinhala",
            "Sinhala_Archaic_Numbers", "Small_Forms", "Sora_Sompeng",
            "Specials", "Sundanese", "Sundanese_Sup", "Sup_Arrows_A",
            "Sup_Arrows_B", "Sup_Arrows_C", "Sup_Math_Operators",
            "Sup_PUA_A", "Sup_PUA_B", "Sup_Punctuation",
            "Sup_Symbols_And_Pictographs", "Super_And_Sub",
            "Sutton_SignWriting", "Syloti_Nagri", "Syriac", "Tagalog",
            "Tagbanwa", "Tags", "Tai_Le", "Tai_Tham", "Tai_Viet",
            "Tai_Xuan_Jing", "Takri", "Tamil", "Telugu", "Thaana", "Thai",
            "Tibetan", "Tifinagh", "Tirhuta", "Transport_And_Map", "UCAS",
            "UCAS_Ext", "Ugaritic", "Vai", "Vedic_Ext", "Vertical_Forms",
            "VS", "VS_Sup", "Warang_Citi", "Yi_Radicals", "Yi_Syllables",
            "Yijing"};
        const static std::vector<std::string> value_names = {
            "Aegean_Numbers", "Ahom", "Alchemical_Symbols",
            "Alphabetic_Presentation_Forms", "Anatolian_Hieroglyphs",
            "Ancient_Greek_Musical_Notation", "Ancient_Greek_Numbers",
            "Ancient_Symbols", "Arabic", "Arabic_Extended_A",
            "Arabic_Mathematical_Alphabetic_Symbols",
            "Arabic_Presentation_Forms_A", "Arabic_Presentation_Forms_B",
            "Arabic_Supplement", "Armenian", "Arrows", "Basic_Latin",
            "Avestan", "Balinese", "Bamum", "Bamum_Supplement", "Bassa_Vah",
            "Batak", "Bengali", "Block_Elements", "Bopomofo",
            "Bopomofo_Extended", "Box_Drawing", "Brahmi",
            "Braille_Patterns", "Buginese", "Buhid",
            "Byzantine_Musical_Symbols", "Carian", "Caucasian_Albanian",
            "Chakma", "Cham", "Cherokee", "Cherokee_Supplement",
            "CJK_Unified_Ideographs", "CJK_Compatibility",
            "CJK_Compatibility_Forms", "CJK_Compatibility_Ideographs",
            "CJK_Compatibility_Ideographs_Supplement",
            "CJK_Unified_Ideographs_Extension_A",
            "CJK_Unified_Ideographs_Extension_B",
            "CJK_Unified_Ideographs_Extension_C",
            "CJK_Unified_Ideographs_Extension_D",
            "CJK_Unified_Ideographs_Extension_E", "CJK_Radicals_Supplement",
            "CJK_Strokes", "CJK_Symbols_And_Punctuation",
            "Hangul_Compatibility_Jamo", "Control_Pictures", "Coptic",
            "Coptic_Epact_Numbers", "Counting_Rod_Numerals", "Cuneiform",
            "Cuneiform_Numbers_And_Punctuation", "Currency_Symbols",
            "Cypriot_Syllabary", "Cyrillic", "Cyrillic_Extended_A",
            "Cyrillic_Extended_B", "Cyrillic_Supplement", "Deseret",
            "Devanagari", "Devanagari_Extended",
            "Combining_Diacritical_Marks",
            "Combining_Diacritical_Marks_Extended",
            "Combining_Diacritical_Marks_For_Symbols",
            "Combining_Diacritical_Marks_Supplement", "Dingbats",
            "Domino_Tiles", "Duployan", "Early_Dynastic_Cuneiform",
            "Egyptian_Hieroglyphs", "Elbasan", "Emoticons",
            "Enclosed_Alphanumerics", "Enclosed_Alphanumeric_Supplement",
            "Enclosed_CJK_Letters_And_Months",
            "Enclosed_Ideographic_Supplement", "Ethiopic",
            "Ethiopic_Extended", "Ethiopic_Extended_A",
            "Ethiopic_Supplement", "Geometric_Shapes",
            "Geometric_Shapes_Extended", "Georgian", "Georgian_Supplement",
            "Glagolitic", "Gothic", "Grantha", "Greek_And_Coptic",
            "Greek_Extended", "Gujarati", "Gurmukhi",
            "Halfwidth_And_Fullwidth_Forms", "Combining_Half_Marks",
            "Hangul_Syllables", "Hanunoo", "Hatran", "Hebrew",
            "High_Private_Use_Surrogates", "High_Surrogates", "Hiragana",
            "Ideographic_Description_Characters", "Imperial_Aramaic",
            "Common_Indic_Number_Forms", "Inscriptional_Pahlavi",
            "Inscriptional_Parthian", "IPA_Extensions", "Hangul_Jamo",
            "Hangul_Jamo_Extended_A", "Hangul_Jamo_Extended_B", "Javanese",
            "Kaithi", "Kana_Supplement", "Kanbun", "Kangxi_Radicals",
            "Kannada", "Katakana", "Katakana_Phonetic_Extensions",
            "Kayah_Li", "Kharoshthi", "Khmer", "Khmer_Symbols", "Khojki",
            "Khudawadi", "Lao", "Latin_1_Supplement", "Latin_Extended_A",
            "Latin_Extended_Additional", "Latin_Extended_B",
            "Latin_Extended_C", "Latin_Extended_D", "Latin_Extended_E",
            "Lepcha", "Letterlike_Symbols", "Limbu", "Linear_A",
            "Linear_B_Ideograms", "Linear_B_Syllabary", "Lisu",
            "Low_Surrogates", "Lycian", "Lydian", "Mahajani",
            "Mahjong_Tiles", "Malayalam", "Mandaic", "Manichaean",
            "Mathematical_Alphanumeric_Symbols", "Mathematical_Operators",
            "Meetei_Mayek", "Meetei_Mayek_Extensions", "Mende_Kikakui",
            "Meroitic_Cursive", "Meroitic_Hieroglyphs", "Miao",
            "Miscellaneous_Symbols_And_Arrows",
            "Miscellaneous_Mathematical_Symbols_A",
            "Miscellaneous_Mathematical_Symbols_B",
            "Miscellaneous_Symbols_And_Pictographs",
            "Miscellaneous_Symbols", "Miscellaneous_Technical", "Modi",
            "Spacing_Modifier_Letters", "Modifier_Tone_Letters",
            "Mongolian", "Mro", "Multani", "Musical_Symbols", "Myanmar",
            "Myanmar_Extended_A", "Myanmar_Extended_B", "Nabataean",
            "No_Block", "New_Tai_Lue", "NKo", "Number_Forms",
            "Optical_Character_Recognition", "Ogham", "Ol_Chiki",
            "Old_Hungarian", "Old_Italic", "Old_North_Arabian",
            "Old_Permic", "Old_Persian", "Old_South_Arabian", "Old_Turkic",
            "Oriya", "Ornamental_Dingbats", "Osmanya", "Pahawh_Hmong",
            "Palmyrene", "Pau_Cin_Hau", "Phags_Pa", "Phaistos_Disc",
            "Phoenician", "Phonetic_Extensions",
            "Phonetic_Extensions_Supplement", "Playing_Cards",
            "Psalter_Pahlavi", "Private_Use_Area", "General_Punctuation",
            "Rejang", "Rumi_Numeral_Symbols", "Runic", "Samaritan",
            "Saurashtra", "Sharada", "Shavian", "Shorthand_Format_Controls",
            "Siddham", "Sinhala", "Sinhala_Archaic_Numbers",
            "Small_Form_Variants", "Sora_Sompeng", "Specials", "Sundanese",
            "Sundanese_Supplement", "Supplemental_Arrows_A",
            "Supplemental_Arrows_B", "Supplemental_Arrows_C",
            "Supplemental_Mathematical_Operators",
            "Supplementary_Private_Use_Area_A",
            "Supplementary_Private_Use_Area_B", "Supplemental_Punctuation",
            "Supplemental_Symbols_And_Pictographs",
            "Superscripts_And_Subscripts", "Sutton_SignWriting",
            "Syloti_Nagri", "Syriac", "Tagalog", "Tagbanwa", "Tags",
            "Tai_Le", "Tai_Tham", "Tai_Viet", "Tai_Xuan_Jing_Symbols",
            "Takri", "Tamil", "Telugu", "Thaana", "Thai", "Tibetan",
            "Tifinagh", "Tirhuta", "Transport_And_Map_Symbols",
            "Unified_Canadian_Aboriginal_Syllabics",
            "Unified_Canadian_Aboriginal_Syllabics_Extended", "Ugaritic",
            "Vai", "Vedic_Extensions", "Vertical_Forms",
            "Variation_Selectors", "Variation_Selectors_Supplement",
            "Warang_Citi", "Yi_Radicals", "Yi_Syllables",
            "Yijing_Hexagram_Symbols"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"canadiansyllabics", BLK_ns::UCAS},
            {"combiningmarksforsymbols", BLK_ns::Diacriticals_For_Symbols},
            {"cyrillicsupplementary", BLK_ns::Cyrillic_Sup},
            {"latin1", BLK_ns::Latin_1_Sup}, {"privateuse", BLK_ns::PUA}}};
    }

    namespace SC_ns {
        enum value_t {
            Aghb, Ahom, Arab, Armi, Armn, Avst, Bali, Bamu, Bass, Batk,
            Beng, Bopo, Brah, Brai, Bugi, Buhd, Cakm, Cans, Cari, Cham,
            Cher, Copt, Cprt, Cyrl, Deva, Dsrt, Dupl, Egyp, Elba, Ethi,
            Geor, Glag, Goth, Gran, Grek, Gujr, Guru, Hang, Hani, Hano,
            Hatr, Hebr, Hira, Hluw, Hmng, Hrkt, Hung, Ital, Java, Kali,
            Kana, Khar, Khmr, Khoj, Knda, Kthi, Lana, Laoo, Latn, Lepc,
            Limb, Lina, Linb, Lisu, Lyci, Lydi, Mahj, Mand, Mani, Mend,
            Merc, Mero, Mlym, Modi, Mong, Mroo, Mtei, Mult, Mymr, Narb,
            Nbat, Nkoo, Ogam, Olck, Orkh, Orya, Osma, Palm, Pauc, Perm,
            Phag, Phli, Phlp, Phnx, Plrd, Prti, Rjng, Runr, Samr, Sarb,
            Saur, Sgnw, Shaw, Shrd, Sidd, Sind, Sinh, Sora, Sund, Sylo,
            Syrc, Tagb, Takr, Tale, Talu, Taml, Tavt, Telu, Tfng, Tglg,
            Thaa, Thai, Tibt, Tirh, Ugar, Vaii, Wara, Xpeo, Xsux, Yiii,
            Zinh, Zyyy, Zzzz};
        const static std::vector<std::string> enum_names = {
            "Aghb", "Ahom", "Arab", "Armi", "Armn", "Avst", "Bali", "Bamu",
            "Bass", "Batk", "Beng", "Bopo", "Brah", "Brai", "Bugi", "Buhd",
            "Cakm", "Cans", "Cari", "Cham", "Cher", "Copt", "Cprt", "Cyrl",
            "Deva", "Dsrt", "Dupl", "Egyp", "Elba", "Ethi", "Geor", "Glag",
            "Goth", "Gran", "Grek", "Gujr", "Guru", "Hang", "Hani", "Hano",
            "Hatr", "Hebr", "Hira", "Hluw", "Hmng", "Hrkt", "Hung", "Ital",
            "Java", "Kali", "Kana", "Khar", "Khmr", "Khoj", "Knda", "Kthi",
            "Lana", "Laoo", "Latn", "Lepc", "Limb", "Lina", "Linb", "Lisu",
            "Lyci", "Lydi", "Mahj", "Mand", "Mani", "Mend", "Merc", "Mero",
            "Mlym", "Modi", "Mong", "Mroo", "Mtei", "Mult", "Mymr", "Narb",
            "Nbat", "Nkoo", "Ogam", "Olck", "Orkh", "Orya", "Osma", "Palm",
            "Pauc", "Perm", "Phag", "Phli", "Phlp", "Phnx", "Plrd", "Prti",
            "Rjng", "Runr", "Samr", "Sarb", "Saur", "Sgnw", "Shaw", "Shrd",
            "Sidd", "Sind", "Sinh", "Sora", "Sund", "Sylo", "Syrc", "Tagb",
            "Takr", "Tale", "Talu", "Taml", "Tavt", "Telu", "Tfng", "Tglg",
            "Thaa", "Thai", "Tibt", "Tirh", "Ugar", "Vaii", "Wara", "Xpeo",
            "Xsux", "Yiii", "Zinh", "Zyyy", "Zzzz"};
        const static std::vector<std::string> value_names = {
            "Caucasian_Albanian", "Ahom", "Arabic", "Imperial_Aramaic",
            "Armenian", "Avestan", "Balinese", "Bamum", "Bassa_Vah",
            "Batak", "Bengali", "Bopomofo", "Brahmi", "Braille", "Buginese",
            "Buhid", "Chakma", "Canadian_Aboriginal", "Carian", "Cham",
            "Cherokee", "Coptic", "Cypriot", "Cyrillic", "Devanagari",
            "Deseret", "Duployan", "Egyptian_Hieroglyphs", "Elbasan",
            "Ethiopic", "Georgian", "Glagolitic", "Gothic", "Grantha",
            "Greek", "Gujarati", "Gurmukhi", "Hangul", "Han", "Hanunoo",
            "Hatran", "Hebrew", "Hiragana", "Anatolian_Hieroglyphs",
            "Pahawh_Hmong", "Katakana_Or_Hiragana", "Old_Hungarian",
            "Old_Italic", "Javanese", "Kayah_Li", "Katakana", "Kharoshthi",
            "Khmer", "Khojki", "Kannada", "Kaithi", "Tai_Tham", "Lao",
            "Latin", "Lepcha", "Limbu", "Linear_A", "Linear_B", "Lisu",
            "Lycian", "Lydian", "Mahajani", "Mandaic", "Manichaean",
            "Mende_Kikakui", "Meroitic_Cursive", "Meroitic_Hieroglyphs",
            "Malayalam", "Modi", "Mongolian", "Mro", "Meetei_Mayek",
            "Multani", "Myanmar", "Old_North_Arabian", "Nabataean", "Nko",
            "Ogham", "Ol_Chiki", "Old_Turkic", "Oriya", "Osmanya",
            "Palmyrene", "Pau_Cin_Hau", "Old_Permic", "Phags_Pa",
            "Inscriptional_Pahlavi", "Psalter_Pahlavi", "Phoenician",
            "Miao", "Inscriptional_Parthian", "Rejang", "Runic",
            "Samaritan", "Old_South_Arabian", "Saurashtra", "SignWriting",
            "Shavian", "Sharada", "Siddham", "Khudawadi", "Sinhala",
            "Sora_Sompeng", "Sundanese", "Syloti_Nagri", "Syriac",
            "Tagbanwa", "Takri", "Tai_Le", "New_Tai_Lue", "Tamil",
            "Tai_Viet", "Telugu", "Tifinagh", "Tagalog", "Thaana", "Thai",
            "Tibetan", "Tirhuta", "Ugaritic", "Vai", "Warang_Citi",
            "Old_Persian", "Cuneiform", "Yi", "Inherited", "Common",
            "Unknown"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"qaac", SC_ns::Copt}, {"qaai", SC_ns::Zinh}}};
    }

    namespace BC_ns {
        enum value_t {
            AL, AN, B, BN, CS, EN, ES, ET, FSI, L, LRE, LRI, LRO, NSM, ON,
            PDF, PDI, R, RLE, RLI, RLO, S, WS};
        const static std::vector<std::string> enum_names = {
            "AL", "AN", "B", "BN", "CS", "EN", "ES", "ET", "FSI", "L",
            "LRE", "LRI", "LRO", "NSM", "ON", "PDF", "PDI", "R", "RLE",
            "RLI", "RLO", "S", "WS"};
        const static std::vector<std::string> value_names = {
            "Arabic_Letter", "Arabic_Number", "Paragraph_Separator",
            "Boundary_Neutral", "Common_Separator", "European_Number",
            "European_Separator", "European_Terminator",
            "First_Strong_Isolate", "Left_To_Right",
            "Left_To_Right_Embedding", "Left_To_Right_Isolate",
            "Left_To_Right_Override", "Nonspacing_Mark", "Other_Neutral",
            "Pop_Directional_Format", "Pop_Directional_Isolate",
            "Right_To_Left", "Right_To_Left_Embedding",
            "Right_To_Left_Isolate", "Right_To_Left_Override",
            "Segment_Separator", "White_Space"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace BPT_ns {
        enum value_t {
            c, n, o};
        const static std::vector<std::string> enum_names = {
            "c", "n", "o"};
        const static std::vector<std::string> value_names = {
            "Close", "None", "Open"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace CCC_ns {
        enum value_t {
            NR, OV, NK, KV, VR, CCC10, CCC11, CCC12, CCC13, CCC14, CCC15,
            CCC16, CCC17, CCC18, CCC19, CCC20, CCC21, CCC22, CCC23, CCC24,
            CCC25, CCC26, CCC27, CCC28, CCC29, CCC30, CCC31, CCC32, CCC33,
            CCC34, CCC35, CCC36, CCC84, CCC91, CCC103, CCC107, CCC118,
            CCC122, CCC129, CCC130, CCC132, CCC133, ATBL, ATB, ATA, ATAR,
            BL, B, BR, L, R, AL, A, AR, DB, DA, IS
        };
        const uint16_t enum_val[] = {
          0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
            22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 84,
            91, 103, 107, 118, 122, 129, 130, 132, 133, 200, 202, 214, 216,
            218, 220, 222, 224, 226, 228, 230, 232, 233, 234, 240};
        const static std::vector<std::string> enum_names = {
            "NR", "OV", "NK", "KV", "VR", "CCC10", "CCC11", "CCC12",
            "CCC13", "CCC14", "CCC15", "CCC16", "CCC17", "CCC18", "CCC19",
            "CCC20", "CCC21", "CCC22", "CCC23", "CCC24", "CCC25", "CCC26",
            "CCC27", "CCC28", "CCC29", "CCC30", "CCC31", "CCC32", "CCC33",
            "CCC34", "CCC35", "CCC36", "CCC84", "CCC91", "CCC103", "CCC107",
            "CCC118", "CCC122", "CCC129", "CCC130", "CCC132", "CCC133",
            "ATBL", "ATB", "ATA", "ATAR", "BL", "B", "BR", "L", "R", "AL",
            "A", "AR", "DB", "DA", "IS"};
        const static std::vector<std::string> value_names = {
            "Not_Reordered", "Overlay", "Nukta", "Kana_Voicing", "Virama",
            "CCC10", "CCC11", "CCC12", "CCC13", "CCC14", "CCC15", "CCC16",
            "CCC17", "CCC18", "CCC19", "CCC20", "CCC21", "CCC22", "CCC23",
            "CCC24", "CCC25", "CCC26", "CCC27", "CCC28", "CCC29", "CCC30",
            "CCC31", "CCC32", "CCC33", "CCC34", "CCC35", "CCC36", "CCC84",
            "CCC91", "CCC103", "CCC107", "CCC118", "CCC122", "CCC129",
            "CCC130", "CCC132", "CCC133", "Attached_Below_Left",
            "Attached_Below", "Attached_Above", "Attached_Above_Right",
            "Below_Left", "Below", "Below_Right", "Left", "Right",
            "Above_Left", "Above", "Above_Right", "Double_Below",
            "Double_Above", "Iota_Subscript"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"0", CCC_ns::NR}, {"1", CCC_ns::OV}, {"10", CCC_ns::CCC10},
            {"103", CCC_ns::CCC103}, {"107", CCC_ns::CCC107},
            {"11", CCC_ns::CCC11}, {"118", CCC_ns::CCC118},
            {"12", CCC_ns::CCC12}, {"122", CCC_ns::CCC122},
            {"129", CCC_ns::CCC129}, {"13", CCC_ns::CCC13},
            {"130", CCC_ns::CCC130}, {"132", CCC_ns::CCC132},
            {"133", CCC_ns::CCC133}, {"14", CCC_ns::CCC14},
            {"15", CCC_ns::CCC15}, {"16", CCC_ns::CCC16},
            {"17", CCC_ns::CCC17}, {"18", CCC_ns::CCC18},
            {"19", CCC_ns::CCC19}, {"20", CCC_ns::CCC20},
            {"200", CCC_ns::ATBL}, {"202", CCC_ns::ATB},
            {"21", CCC_ns::CCC21}, {"214", CCC_ns::ATA},
            {"216", CCC_ns::ATAR}, {"218", CCC_ns::BL},
            {"22", CCC_ns::CCC22}, {"220", CCC_ns::B}, {"222", CCC_ns::BR},
            {"224", CCC_ns::L}, {"226", CCC_ns::R}, {"228", CCC_ns::AL},
            {"23", CCC_ns::CCC23}, {"230", CCC_ns::A}, {"232", CCC_ns::AR},
            {"233", CCC_ns::DB}, {"234", CCC_ns::DA}, {"24", CCC_ns::CCC24},
            {"240", CCC_ns::IS}, {"25", CCC_ns::CCC25},
            {"26", CCC_ns::CCC26}, {"27", CCC_ns::CCC27},
            {"28", CCC_ns::CCC28}, {"29", CCC_ns::CCC29},
            {"30", CCC_ns::CCC30}, {"31", CCC_ns::CCC31},
            {"32", CCC_ns::CCC32}, {"33", CCC_ns::CCC33},
            {"34", CCC_ns::CCC34}, {"35", CCC_ns::CCC35},
            {"36", CCC_ns::CCC36}, {"7", CCC_ns::NK}, {"8", CCC_ns::KV},
            {"84", CCC_ns::CCC84}, {"9", CCC_ns::VR}, {"91", CCC_ns::CCC91}}};
    }

    namespace DT_ns {
        enum value_t {
            Can, Com, Enc, Fin, Font, Fra, Init, Iso, Med, Nar, Nb, None,
            Sml, Sqr, Sub, Sup, Vert, Wide};
        const static std::vector<std::string> enum_names = {
            "Can", "Com", "Enc", "Fin", "Font", "Fra", "Init", "Iso", "Med",
            "Nar", "Nb", "None", "Sml", "Sqr", "Sub", "Sup", "Vert", "Wide"};
        const static std::vector<std::string> value_names = {
            "Canonical", "Compat", "Circle", "Final", "Font", "Fraction",
            "Initial", "Isolated", "Medial", "Narrow", "Nobreak", "None",
            "Small", "Square", "Sub", "Super", "Vertical", "Wide"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace EA_ns {
        enum value_t {
            A, F, H, N, Na, W};
        const static std::vector<std::string> enum_names = {
            "A", "F", "H", "N", "Na", "W"};
        const static std::vector<std::string> value_names = {
            "Ambiguous", "Fullwidth", "Halfwidth", "Neutral", "Narrow",
            "Wide"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace GC_ns {
        enum value_t {
            C, Cc, Cf, Cn, Co, Cs, L, LC, Ll, Lm, Lo, Lt, Lu, M, Mc, Me, Mn,
            N, Nd, Nl, No, P, Pc, Pd, Pe, Pf, Pi, Po, Ps, S, Sc, Sk, Sm, So,
            Z, Zl, Zp, Zs};
        const static std::vector<std::string> enum_names = {
            "C", "Cc", "Cf", "Cn", "Co", "Cs", "L", "LC", "Ll", "Lm", "Lo",
            "Lt", "Lu", "M", "Mc", "Me", "Mn", "N", "Nd", "Nl", "No", "P",
            "Pc", "Pd", "Pe", "Pf", "Pi", "Po", "Ps", "S", "Sc", "Sk", "Sm",
            "So", "Z", "Zl", "Zp", "Zs"};
        const static std::vector<std::string> value_names = {
            "Other", "Control", "Format", "Unassigned", "Private_Use",
            "Surrogate", "Letter", "Cased_Letter", "Lowercase_Letter",
            "Modifier_Letter", "Other_Letter", "Titlecase_Letter",
            "Uppercase_Letter", "Mark", "Spacing_Mark", "Enclosing_Mark",
            "Nonspacing_Mark", "Number", "Decimal_Number", "Letter_Number",
            "Other_Number", "Punctuation", "Connector_Punctuation",
            "Dash_Punctuation", "Close_Punctuation", "Final_Punctuation",
            "Initial_Punctuation", "Other_Punctuation", "Open_Punctuation",
            "Symbol", "Currency_Symbol", "Modifier_Symbol", "Math_Symbol",
            "Other_Symbol", "Separator", "Line_Separator",
            "Paragraph_Separator", "Space_Separator"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"cntrl", GC_ns::Cc}, {"combiningmark", GC_ns::M},
            {"digit", GC_ns::Nd}, {"punct", GC_ns::P}}};
    }

    namespace GCB_ns {
        enum value_t {
            CN, CR, EX, L, LF, LV, LVT, PP, RI, SM, T, V, XX};
        const static std::vector<std::string> enum_names = {
            "CN", "CR", "EX", "L", "LF", "LV", "LVT", "PP", "RI", "SM", "T",
            "V", "XX"};
        const static std::vector<std::string> value_names = {
            "Control", "CR", "Extend", "L", "LF", "LV", "LVT", "Prepend",
            "Regional_Indicator", "SpacingMark", "T", "V", "Other"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace HST_ns {
        enum value_t {
            L, LV, LVT, NA, T, V};
        const static std::vector<std::string> enum_names = {
            "L", "LV", "LVT", "NA", "T", "V"};
        const static std::vector<std::string> value_names = {
            "Leading_Jamo", "LV_Syllable", "LVT_Syllable", "Not_Applicable",
            "Trailing_Jamo", "Vowel_Jamo"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace INPC_ns {
        enum value_t {
            Bottom, Bottom_And_Right, Left, Left_And_Right, NA, Overstruck,
            Right, Top, Top_And_Bottom, Top_And_Bottom_And_Right,
            Top_And_Left, Top_And_Left_And_Right, Top_And_Right,
            Visual_Order_Left};
        const static std::vector<std::string> enum_names = {
            "Bottom", "Bottom_And_Right", "Left", "Left_And_Right", "NA",
            "Overstruck", "Right", "Top", "Top_And_Bottom",
            "Top_And_Bottom_And_Right", "Top_And_Left",
            "Top_And_Left_And_Right", "Top_And_Right", "Visual_Order_Left"};
        const static std::vector<std::string> value_names = {
            "Bottom", "Bottom_And_Right", "Left", "Left_And_Right", "NA",
            "Overstruck", "Right", "Top", "Top_And_Bottom",
            "Top_And_Bottom_And_Right", "Top_And_Left",
            "Top_And_Left_And_Right", "Top_And_Right", "Visual_Order_Left"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace INSC_ns {
        enum value_t {
            Avagraha, Bindu, Brahmi_Joining_Number, Cantillation_Mark,
            Consonant, Consonant_Dead, Consonant_Final,
            Consonant_Head_Letter, Consonant_Killer, Consonant_Medial,
            Consonant_Placeholder, Consonant_Preceding_Repha,
            Consonant_Prefixed, Consonant_Subjoined,
            Consonant_Succeeding_Repha, Consonant_With_Stacker,
            Gemination_Mark, Invisible_Stacker, Joiner, Modifying_Letter,
            Non_Joiner, Nukta, Number, Number_Joiner, Other, Pure_Killer,
            Register_Shifter, Syllable_Modifier, Tone_Letter, Tone_Mark,
            Virama, Visarga, Vowel, Vowel_Dependent, Vowel_Independent};
        const static std::vector<std::string> enum_names = {
            "Avagraha", "Bindu", "Brahmi_Joining_Number",
            "Cantillation_Mark", "Consonant", "Consonant_Dead",
            "Consonant_Final", "Consonant_Head_Letter", "Consonant_Killer",
            "Consonant_Medial", "Consonant_Placeholder",
            "Consonant_Preceding_Repha", "Consonant_Prefixed",
            "Consonant_Subjoined", "Consonant_Succeeding_Repha",
            "Consonant_With_Stacker", "Gemination_Mark",
            "Invisible_Stacker", "Joiner", "Modifying_Letter", "Non_Joiner",
            "Nukta", "Number", "Number_Joiner", "Other", "Pure_Killer",
            "Register_Shifter", "Syllable_Modifier", "Tone_Letter",
            "Tone_Mark", "Virama", "Visarga", "Vowel", "Vowel_Dependent",
            "Vowel_Independent"};
        const static std::vector<std::string> value_names = {
            "Avagraha", "Bindu", "Brahmi_Joining_Number",
            "Cantillation_Mark", "Consonant", "Consonant_Dead",
            "Consonant_Final", "Consonant_Head_Letter", "Consonant_Killer",
            "Consonant_Medial", "Consonant_Placeholder",
            "Consonant_Preceding_Repha", "Consonant_Prefixed",
            "Consonant_Subjoined", "Consonant_Succeeding_Repha",
            "Consonant_With_Stacker", "Gemination_Mark",
            "Invisible_Stacker", "Joiner", "Modifying_Letter", "Non_Joiner",
            "Nukta", "Number", "Number_Joiner", "Other", "Pure_Killer",
            "Register_Shifter", "Syllable_Modifier", "Tone_Letter",
            "Tone_Mark", "Virama", "Visarga", "Vowel", "Vowel_Dependent",
            "Vowel_Independent"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace JG_ns {
        enum value_t {
            Ain, Alaph, Alef, Beh, Beth, Burushaski_Yeh_Barree, Dal,
            Dalath_Rish, E, Farsi_Yeh, Fe, Feh, Final_Semkath, Gaf, Gamal,
            Hah, He, Heh, Heh_Goal, Heth, Kaf, Kaph, Khaph, Knotted_Heh,
            Lam, Lamadh, Manichaean_Aleph, Manichaean_Ayin, Manichaean_Beth,
            Manichaean_Daleth, Manichaean_Dhamedh, Manichaean_Five,
            Manichaean_Gimel, Manichaean_Heth, Manichaean_Hundred,
            Manichaean_Kaph, Manichaean_Lamedh, Manichaean_Mem,
            Manichaean_Nun, Manichaean_One, Manichaean_Pe, Manichaean_Qoph,
            Manichaean_Resh, Manichaean_Sadhe, Manichaean_Samekh,
            Manichaean_Taw, Manichaean_Ten, Manichaean_Teth,
            Manichaean_Thamedh, Manichaean_Twenty, Manichaean_Waw,
            Manichaean_Yodh, Manichaean_Zayin, Meem, Mim, No_Joining_Group,
            Noon, Nun, Nya, Pe, Qaf, Qaph, Reh, Reversed_Pe, Rohingya_Yeh,
            Sad, Sadhe, Seen, Semkath, Shin, Straight_Waw, Swash_Kaf,
            Syriac_Waw, Tah, Taw, Teh_Marbuta, Teh_Marbuta_Goal, Teth, Waw,
            Yeh, Yeh_Barree, Yeh_With_Tail, Yudh, Yudh_He, Zain, Zhain};
        const static std::vector<std::string> enum_names = {
            "Ain", "Alaph", "Alef", "Beh", "Beth", "Burushaski_Yeh_Barree",
            "Dal", "Dalath_Rish", "E", "Farsi_Yeh", "Fe", "Feh",
            "Final_Semkath", "Gaf", "Gamal", "Hah", "He", "Heh", "Heh_Goal",
            "Heth", "Kaf", "Kaph", "Khaph", "Knotted_Heh", "Lam", "Lamadh",
            "Manichaean_Aleph", "Manichaean_Ayin", "Manichaean_Beth",
            "Manichaean_Daleth", "Manichaean_Dhamedh", "Manichaean_Five",
            "Manichaean_Gimel", "Manichaean_Heth", "Manichaean_Hundred",
            "Manichaean_Kaph", "Manichaean_Lamedh", "Manichaean_Mem",
            "Manichaean_Nun", "Manichaean_One", "Manichaean_Pe",
            "Manichaean_Qoph", "Manichaean_Resh", "Manichaean_Sadhe",
            "Manichaean_Samekh", "Manichaean_Taw", "Manichaean_Ten",
            "Manichaean_Teth", "Manichaean_Thamedh", "Manichaean_Twenty",
            "Manichaean_Waw", "Manichaean_Yodh", "Manichaean_Zayin", "Meem",
            "Mim", "No_Joining_Group", "Noon", "Nun", "Nya", "Pe", "Qaf",
            "Qaph", "Reh", "Reversed_Pe", "Rohingya_Yeh", "Sad", "Sadhe",
            "Seen", "Semkath", "Shin", "Straight_Waw", "Swash_Kaf",
            "Syriac_Waw", "Tah", "Taw", "Teh_Marbuta", "Teh_Marbuta_Goal",
            "Teth", "Waw", "Yeh", "Yeh_Barree", "Yeh_With_Tail", "Yudh",
            "Yudh_He", "Zain", "Zhain"};
        const static std::vector<std::string> value_names = {
            "Ain", "Alaph", "Alef", "Beh", "Beth", "Burushaski_Yeh_Barree",
            "Dal", "Dalath_Rish", "E", "Farsi_Yeh", "Fe", "Feh",
            "Final_Semkath", "Gaf", "Gamal", "Hah", "He", "Heh", "Heh_Goal",
            "Heth", "Kaf", "Kaph", "Khaph", "Knotted_Heh", "Lam", "Lamadh",
            "Manichaean_Aleph", "Manichaean_Ayin", "Manichaean_Beth",
            "Manichaean_Daleth", "Manichaean_Dhamedh", "Manichaean_Five",
            "Manichaean_Gimel", "Manichaean_Heth", "Manichaean_Hundred",
            "Manichaean_Kaph", "Manichaean_Lamedh", "Manichaean_Mem",
            "Manichaean_Nun", "Manichaean_One", "Manichaean_Pe",
            "Manichaean_Qoph", "Manichaean_Resh", "Manichaean_Sadhe",
            "Manichaean_Samekh", "Manichaean_Taw", "Manichaean_Ten",
            "Manichaean_Teth", "Manichaean_Thamedh", "Manichaean_Twenty",
            "Manichaean_Waw", "Manichaean_Yodh", "Manichaean_Zayin", "Meem",
            "Mim", "No_Joining_Group", "Noon", "Nun", "Nya", "Pe", "Qaf",
            "Qaph", "Reh", "Reversed_Pe", "Rohingya_Yeh", "Sad", "Sadhe",
            "Seen", "Semkath", "Shin", "Straight_Waw", "Swash_Kaf",
            "Syriac_Waw", "Tah", "Taw", "Teh_Marbuta", "Hamza_On_Heh_Goal",
            "Teth", "Waw", "Yeh", "Yeh_Barree", "Yeh_With_Tail", "Yudh",
            "Yudh_He", "Zain", "Zhain"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace JT_ns {
        enum value_t {
            C, D, L, R, T, U};
        const static std::vector<std::string> enum_names = {
            "C", "D", "L", "R", "T", "U"};
        const static std::vector<std::string> value_names = {
            "Join_Causing", "Dual_Joining", "Left_Joining", "Right_Joining",
            "Transparent", "Non_Joining"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace LB_ns {
        enum value_t {
            AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3,
            HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU,
            RI, SA, SG, SP, SY, WJ, XX, ZW};
        const static std::vector<std::string> enum_names = {
            "AI", "AL", "B2", "BA", "BB", "BK", "CB", "CJ", "CL", "CM",
            "CP", "CR", "EX", "GL", "H2", "H3", "HL", "HY", "ID", "IN",
            "IS", "JL", "JT", "JV", "LF", "NL", "NS", "NU", "OP", "PO",
            "PR", "QU", "RI", "SA", "SG", "SP", "SY", "WJ", "XX", "ZW"};
        const static std::vector<std::string> value_names = {
            "Ambiguous", "Alphabetic", "Break_Both", "Break_After",
            "Break_Before", "Mandatory_Break", "Contingent_Break",
            "Conditional_Japanese_Starter", "Close_Punctuation",
            "Combining_Mark", "Close_Parenthesis", "Carriage_Return",
            "Exclamation", "Glue", "H2", "H3", "Hebrew_Letter", "Hyphen",
            "Ideographic", "Inseparable", "Infix_Numeric", "JL", "JT", "JV",
            "Line_Feed", "Next_Line", "Nonstarter", "Numeric",
            "Open_Punctuation", "Postfix_Numeric", "Prefix_Numeric",
            "Quotation", "Regional_Indicator", "Complex_Context",
            "Surrogate", "Space", "Break_Symbols", "Word_Joiner", "Unknown",
            "ZWSpace"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            {"inseperable", LB_ns::IN}}};
    }

    namespace NFC_QC_ns {
        enum value_t {
            M, N, Y};
        const static std::vector<std::string> enum_names = {
            "M", "N", "Y"};
        const static std::vector<std::string> value_names = {
            "Maybe", "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFD_QC_ns {
        enum value_t {
            N, Y};
        const static std::vector<std::string> enum_names = {
            "N", "Y"};
        const static std::vector<std::string> value_names = {
            "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFKC_QC_ns {
        enum value_t {
            M, N, Y};
        const static std::vector<std::string> enum_names = {
            "M", "N", "Y"};
        const static std::vector<std::string> value_names = {
            "Maybe", "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NFKD_QC_ns {
        enum value_t {
            N, Y};
        const static std::vector<std::string> enum_names = {
            "N", "Y"};
        const static std::vector<std::string> value_names = {
            "No", "Yes"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace NT_ns {
        enum value_t {
            De, Di, None, Nu};
        const static std::vector<std::string> enum_names = {
            "De", "Di", "None", "Nu"};
        const static std::vector<std::string> value_names = {
            "Decimal", "Digit", "None", "Numeric"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace SB_ns {
        enum value_t {
            AT, CL, CR, EX, FO, LE, LF, LO, NU, SC, SE, SP, ST, UP, XX};
        const static std::vector<std::string> enum_names = {
            "AT", "CL", "CR", "EX", "FO", "LE", "LF", "LO", "NU", "SC",
            "SE", "SP", "ST", "UP", "XX"};
        const static std::vector<std::string> value_names = {
            "ATerm", "Close", "CR", "Extend", "Format", "OLetter", "LF",
            "Lower", "Numeric", "SContinue", "Sep", "Sp", "STerm", "Upper",
            "Other"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }

    namespace WB_ns {
        enum value_t {
            CR, DQ, EX, Extend, FO, HL, KA, LE, LF, MB, ML, MN, NL, NU, RI,
            SQ, XX};
        const static std::vector<std::string> enum_names = {
            "CR", "DQ", "EX", "Extend", "FO", "HL", "KA", "LE", "LF", "MB",
            "ML", "MN", "NL", "NU", "RI", "SQ", "XX"};
        const static std::vector<std::string> value_names = {
            "CR", "Double_Quote", "ExtendNumLet", "Extend", "Format",
            "Hebrew_Letter", "Katakana", "ALetter", "LF", "MidNumLet",
            "MidLetter", "MidNum", "Newline", "Numeric",
            "Regional_Indicator", "Single_Quote", "Other"};
        static std::unordered_map<std::string, int> aliases_only_map {{
            }};
    }
}

#endif
